"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/assistant.ts":
/*!**************************!*\
  !*** ./lib/assistant.ts ***!
  \**************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processMessages: () => (/* binding */ processMessages),\n/* harmony export */   stopGeneration: () => (/* binding */ stopGeneration)\n/* harmony export */ });\n/* harmony import */ var _config_functions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/config/functions */ \"(app-pages-browser)/./config/functions.ts\");\n/* harmony import */ var _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/stores/useConversationStore */ \"(app-pages-browser)/./stores/useConversationStore.ts\");\n/* harmony import */ var _lib_tools_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/tools/tools */ \"(app-pages-browser)/./lib/tools/tools.ts\");\n\n\n\nlet controller = null;\nasync function processMessages(message) {\n    const { addChatMessage, addConversationItem, setAssistantLoading, conversationItems } = _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState();\n    // Add user message\n    const userMessage = {\n        type: \"message\",\n        role: \"user\",\n        content: [\n            {\n                type: \"input_text\",\n                text: message\n            }\n        ]\n    };\n    addChatMessage(userMessage);\n    addConversationItem(userMessage);\n    setAssistantLoading(true);\n    try {\n        const tools = await (0,_lib_tools_tools__WEBPACK_IMPORTED_MODULE_2__.getTools)();\n        const response = await fetch(\"/api/turn_response\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                messages: [\n                    ...conversationItems,\n                    userMessage\n                ],\n                tools\n            })\n        });\n        if (!response.ok) {\n            throw new Error(\"HTTP error! status: \".concat(response.status));\n        }\n        await handleTurn(response);\n    } catch (error) {\n        console.error(\"Error processing messages:\", error);\n        addChatMessage({\n            type: \"message\",\n            role: \"assistant\",\n            content: [\n                {\n                    type: \"output_text\",\n                    text: \"Sorry, I encountered an error. Please try again.\"\n                }\n            ]\n        });\n    } finally{\n        setAssistantLoading(false);\n    }\n}\nasync function handleTurn(response) {\n    var _response_body;\n    const { addChatMessage, addConversationItem } = _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState();\n    controller = new AbortController();\n    const reader = (_response_body = response.body) === null || _response_body === void 0 ? void 0 : _response_body.getReader();\n    if (!reader) {\n        throw new Error(\"No response body reader available\");\n    }\n    const decoder = new TextDecoder();\n    let currentMessage = null;\n    let currentToolCalls = [];\n    try {\n        while(true){\n            const { done, value } = await reader.read();\n            if (done) break;\n            const chunk = decoder.decode(value);\n            const lines = chunk.split('\\n').filter((line)=>line.trim() !== '');\n            for (const line of lines){\n                if (line.startsWith('data: ')) {\n                    try {\n                        const eventData = JSON.parse(line.slice(6));\n                        const result = await handleEvent(eventData, currentMessage, currentToolCalls);\n                        if (result) {\n                            currentMessage = result;\n                        }\n                    } catch (error) {\n                        console.error(\"Error parsing SSE data:\", error);\n                    }\n                }\n            }\n        }\n    } finally{\n        reader.releaseLock();\n        controller = null;\n    }\n}\nasync function handleEvent(eventData, currentMessage, currentToolCalls) {\n    const { addChatMessage, addConversationItem } = _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState();\n    switch(eventData.event){\n        case 'response.created':\n            currentMessage = {\n                type: \"message\",\n                role: \"assistant\",\n                content: []\n            };\n            addChatMessage(currentMessage);\n            return currentMessage;\n        case 'response.output_item.added':\n            var _eventData_data_item;\n            // New text output item added\n            if (!currentMessage) {\n                currentMessage = {\n                    type: \"message\",\n                    role: \"assistant\",\n                    content: []\n                };\n            }\n            if (((_eventData_data_item = eventData.data.item) === null || _eventData_data_item === void 0 ? void 0 : _eventData_data_item.type) === 'message') {\n                const textPart = {\n                    type: \"output_text\",\n                    text: \"\"\n                };\n                currentMessage.content.push(textPart);\n                addChatMessage({\n                    ...currentMessage\n                });\n            }\n            return currentMessage;\n        case 'response.content_part.added':\n            // Text content part added\n            if (!currentMessage) {\n                currentMessage = {\n                    type: \"message\",\n                    role: \"assistant\",\n                    content: []\n                };\n            }\n            const textPart = {\n                type: \"output_text\",\n                text: \"\"\n            };\n            currentMessage.content.push(textPart);\n            addChatMessage({\n                ...currentMessage\n            });\n            return currentMessage;\n        case 'response.output_text.delta':\n            // Text delta for streaming\n            if (!currentMessage) {\n                currentMessage = {\n                    type: \"message\",\n                    role: \"assistant\",\n                    content: []\n                };\n            }\n            if (eventData.data.delta) {\n                if (currentMessage.content.length === 0) {\n                    currentMessage.content.push({\n                        type: \"output_text\",\n                        text: \"\"\n                    });\n                }\n                const lastContent = currentMessage.content[currentMessage.content.length - 1];\n                if ((lastContent === null || lastContent === void 0 ? void 0 : lastContent.type) === 'output_text') {\n                    lastContent.text += eventData.data.delta;\n                    addChatMessage({\n                        ...currentMessage\n                    });\n                }\n            }\n            return currentMessage;\n        case 'response.function_call_delta':\n            // Handle function call streaming\n            const callId = eventData.data.id;\n            let toolCall = currentToolCalls.find((tc)=>tc.id === callId);\n            if (!toolCall) {\n                toolCall = {\n                    id: callId,\n                    type: 'function',\n                    function: {\n                        name: '',\n                        arguments: ''\n                    }\n                };\n                currentToolCalls.push(toolCall);\n                // Add tool call progress indicator\n                addChatMessage({\n                    type: \"tool_call_progress\",\n                    id: callId,\n                    name: eventData.data.name || '',\n                    status: \"executing\",\n                    progress: 0\n                });\n            }\n            if (eventData.data.name) {\n                toolCall.function.name = eventData.data.name;\n            }\n            if (eventData.data.arguments) {\n                toolCall.function.arguments += eventData.data.arguments;\n            }\n            break;\n        case 'response.function_call_done':\n            // Execute the function call\n            const completedCall = currentToolCalls.find((tc)=>tc.id === eventData.data.id);\n            if (completedCall) {\n                await executeFunctionCall(completedCall);\n            }\n            break;\n        case 'response.done':\n        case 'response.output_item.done':\n            if (currentMessage) {\n                addConversationItem(currentMessage);\n            }\n            return currentMessage;\n    }\n}\nasync function executeFunctionCall(toolCall) {\n    const { addChatMessage } = _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState();\n    try {\n        // Update progress to show execution\n        addChatMessage({\n            type: \"tool_call_progress\",\n            id: toolCall.id,\n            name: toolCall.function.name,\n            status: \"executing\",\n            progress: 50\n        });\n        const functionName = toolCall.function.name;\n        const functionArgs = JSON.parse(toolCall.function.arguments);\n        if (_config_functions__WEBPACK_IMPORTED_MODULE_0__.functionsMap[functionName]) {\n            const result = await _config_functions__WEBPACK_IMPORTED_MODULE_0__.functionsMap[functionName](functionArgs);\n            // Update progress to show completion\n            addChatMessage({\n                type: \"tool_call_progress\",\n                id: toolCall.id,\n                name: toolCall.function.name,\n                status: \"completed\",\n                progress: 100,\n                result: result\n            });\n            // Add tool result to conversation\n            const toolResultMessage = {\n                type: \"message\",\n                role: \"tool\",\n                tool_call_id: toolCall.id,\n                content: [\n                    {\n                        type: \"tool_result\",\n                        result: JSON.stringify(result)\n                    }\n                ]\n            };\n            _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState().addConversationItem(toolResultMessage);\n            // Continue conversation with tool result\n            await processToolResult();\n        }\n    } catch (error) {\n        console.error(\"Error executing function call:\", error);\n        addChatMessage({\n            type: \"tool_call_progress\",\n            id: toolCall.id,\n            name: toolCall.function.name,\n            status: \"error\",\n            progress: 0,\n            error: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\nasync function processToolResult() {\n    const { conversationItems, setAssistantLoading } = _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState();\n    setAssistantLoading(true);\n    try {\n        const tools = await (0,_lib_tools_tools__WEBPACK_IMPORTED_MODULE_2__.getTools)();\n        const response = await fetch(\"/api/turn_response\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                messages: conversationItems,\n                tools\n            })\n        });\n        if (response.ok) {\n            await handleTurn(response);\n        }\n    } catch (error) {\n        console.error(\"Error processing tool result:\", error);\n    } finally{\n        setAssistantLoading(false);\n    }\n}\nfunction stopGeneration() {\n    if (controller) {\n        controller.abort();\n        controller = null;\n        _stores_useConversationStore__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getState().setAssistantLoading(false);\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/assistant.ts\n"));

/***/ })

});